---
- name: Create service account for jaeger
  command: "{{ openshift_client_binary }} create sa -n {{ openshift_istio_namespace }} {{ openshift_istio_jaeger_service_account }}"

- name: Create elasticsearch configmap
  shell: "{{ openshift_client_binary }} create -n {{ openshift_istio_namespace }} -f {{ openshift_elasticsearch_configmap_yaml }}"

- name: Create elasticsearch
  shell: "{{ openshift_client_binary }} create -n {{ openshift_istio_namespace }} -f {{ openshift_elasticsearch_yaml }}"

- name: Wait for elastic search to be ready
  shell: "{{ openshift_client_binary }} get pods -n {{ openshift_istio_namespace }} elasticsearch-0 | egrep '1/1.*Running'"
  register: result
  until: result.rc == 0
  retries: 30
  delay: 2
  ignore_errors: yes

- name: Exclude zipkin service from mTLS
  replace:
    path: "{{ openshift_jaeger_production_yaml }}"
    regexp: '(\s+kind:\s+Service\s*\n\s+metadata:\s*\n)(\s+)(name:\s+zipkin\s*\n)'
    replace: '\1\2\3\2annotations:\n\2  auth.istio.io/9411: NONE\n'

- name: Exclude jaeger-collector service from mTLS
  replace:
    path: "{{ openshift_jaeger_production_yaml }}"
    regexp: '(\s+kind:\s+Service\s*\n\s+metadata:\s*\n)(\s+)(name:\s+jaeger-collector\s*\n)'
    replace: '\1\2\3\2annotations:\n\2  auth.istio.io/14267: NONE\n\2  auth.istio.io/14268: NONE\n\2  auth.istio.io/9411: NONE\n'

- name: Create jaeger components
  shell: "{{ openshift_client_binary }} create -n {{ openshift_istio_namespace }} -f {{ openshift_jaeger_production_yaml }}"

- name: Create jaeger tracing service
  shell: "{{ openshift_client_binary }} create -n {{ openshift_istio_namespace }} -f {{ openshift_jaeger_tracing_yaml }}"

- name: Check jaeger-query route exists
  command: "{{ openshift_client_binary }} get route jaeger-query -n {{ openshift_istio_namespace }}"
  register: jaeger_route
  ignore_errors: yes

- name: Create route for jaeger-query
  command: "{{ openshift_client_binary }} create route edge jaeger-query --service=jaeger-query -n {{ openshift_istio_namespace }}"
  when: jaeger_route != 0

- name: Label route for jaeger-query
  command: "{{ openshift_client_binary }} label route jaeger-query -n {{ openshift_istio_namespace }} --overwrite app=jaeger-query"
  when: jaeger_route != 0

- name: Check tracing route exists
  command: "{{ openshift_client_binary }} get route tracing -n {{ openshift_istio_namespace }}"
  register: jaeger_route
  ignore_errors: yes

- name: Create route for tracing
  command: "{{ openshift_client_binary }} create route edge tracing --service=tracing -n {{ openshift_istio_namespace }}"
  when: jaeger_route != 0

- name: Label route for tracing
  command: "{{ openshift_client_binary }} label route tracing -n {{ openshift_istio_namespace }} --overwrite app=tracing"
  when: jaeger_route != 0
